
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Erick Solano
 */
public class Comercio extends javax.swing.JFrame {

    /**
     * Creates new form Comercio
     */
    public Comercio() {
        initComponents();
        Actualizar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TIPO = new javax.swing.ButtonGroup();
        Vender = new javax.swing.JRadioButton();
        Devolver = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        Cantidad = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Productos = new javax.swing.JComboBox<>();
        Registrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TIPO.add(Vender);
        Vender.setText("Vender");

        TIPO.add(Devolver);
        Devolver.setText("Devolver");

        jLabel1.setText("Cantidad");

        jLabel2.setText("Producto");

        Registrar.setText("Registrar");
        Registrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegistrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Vender)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(74, 74, 74)
                                .addComponent(Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(121, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(45, 45, 45)
                                .addComponent(Productos, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Devolver))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(Registrar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(Productos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Vender)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Devolver)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Registrar)
                .addContainerGap(118, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
Nodo_Productos ptr = null, ult = null;

    public void Actualizar() {
        Nodo_Productos p = ptr;
        String ruta = "archivo_productos.txt";
        File archivo_productos = new File(ruta);
        if (archivo_productos.exists()) {
            ptr = null;
            ult = null;
            String Nombre = "", Precio = "", Cantidad = "", Random = "";
            File archivo;
            FileReader fr = null;
            BufferedReader br = null;
            try {
                archivo = new File("archivo_productos.txt");
                fr = new FileReader(archivo);
                br = new BufferedReader(fr);
                String linea;
                while ((linea = br.readLine()) != null) {
                    int punt = 0;
                    int cont = 0;
                    for (int i = 0; i < linea.length(); i++) {
                        if (linea.substring(i, i + 1).equals(";")) {
                            if (punt == 0) {
                                Nombre = linea.substring(cont, i);
                            }
                            if (punt == 1) {
                                Cantidad = linea.substring(cont, i);
                            }
                            if (punt == 2) {
                                Precio = linea.substring(cont, i);
                            }
                            if (punt == 3) {
                                Random = linea.substring(cont, i);
                            }
                            punt++;
                            cont = i + 1;
                        }
                    }
                    if (ptr == null) {
                        ptr = new Nodo_Productos(Nombre, Integer.parseInt(Cantidad), Float.parseFloat(Precio), Integer.parseInt(Random), null, null);
                        ptr.setLlink(null);
                        p = ptr;
                    } else {
                        Nodo_Productos q = new Nodo_Productos(Nombre, Integer.parseInt(Cantidad), Float.parseFloat(Precio), Integer.parseInt(Random), null, null);
                        p.setRlink(q);
                        q.setLlink(p);
                        p = q;
                    }
                    p.setRlink(null);
                    ult = p;

                }

            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (null != fr) {
                        fr.close();
                    }
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
            }

            Agregar_Productos();
        } else {
            System.out.println("No hay archivo");

        }

    }

    private void RegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegistrarActionPerformed
        // TODO add your handling code here:
        System.out.println("1");
        Nodo_Productos p = ptr;
        while (p.getNombre() != Productos.getSelectedItem() && p != null) {
            p = p.getRlink();
        }
        if (Vender.isSelected()) {
            try {
                int cant = Integer.parseInt(Cantidad.getText());
                if (cant <= p.getCantidad() && cant > 0) {
                    p.setCantidad(p.getCantidad() - cant);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "¡ERROR! Ingrese una 1  cantidad valida", "Atencion", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            if (Devolver.isSelected()) {
                try {
                    int cant = Integer.parseInt(Cantidad.getText());
                    if (cant >= 0) {
                        p.setCantidad(p.getCantidad() + cant);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "¡ERROR! Ingrese una  2 cantidad valida", "Atencion", JOptionPane.ERROR_MESSAGE);
                }
            } else {

            }
        }
        clearConsole();
        Actualizar_Archivo();

    }//GEN-LAST:event_RegistrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Comercio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Comercio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Comercio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Comercio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Comercio().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Cantidad;
    private javax.swing.JRadioButton Devolver;
    private javax.swing.JComboBox<String> Productos;
    private javax.swing.JButton Registrar;
    private javax.swing.ButtonGroup TIPO;
    private javax.swing.JRadioButton Vender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    public void Agregar_Productos() {
        Nodo_Productos p = ptr;
        Productos.removeAllItems();
        while (p != null) {
            Productos.addItem(p.getNombre());
            p = p.getRlink();
        }
    }

    public void Mostrar() {
        Nodo_Productos p = ptr;
        while (p != null) {
            System.out.println(p.getNombre());
            p = p.getRlink();
        }
    }

    public void clearConsole() {
        File fichero = new File("archivo_productos.txt");
        if (fichero.delete()) {
            System.out.println("El fichero ha sido borrado satisfactoriamente");
        } else {
            System.out.println("El fichero no pudó ser borrado");
        }
    }

    public void Actualizar_Archivo() {
        String ruta = "archivo_productos.txt";
        File archivo_productos = new File(ruta);
        BufferedWriter BFW = null;
        if (archivo_productos.exists()) {
            try {
                BFW = new BufferedWriter(new FileWriter(archivo_productos, true));
            } catch (IOException ex) {
                Logger.getLogger(Nuevo_Producto.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                BFW = new BufferedWriter(new FileWriter(archivo_productos, true));
            } catch (IOException ex) {
                Logger.getLogger(Nuevo_Producto.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        FileWriter archivo = null;
        PrintWriter PW = null;
        int cont = 0;
        try {
            archivo = new FileWriter("archivo_productos.txt", true);
            PW = new PrintWriter(archivo);
            Nodo_Productos p = ptr;
            while (p != null) {
                PW.println(p.getNombre() + ";" + p.getCantidad() + ";" + p.getPrecio() + ";" + p.getRamdom() + ";");
                p = p.getRlink();
                System.out.println(cont++);
            }
            BFW.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != archivo) {
                    archivo.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        Actualizar();
    }

}
